const mysql = require('mysql2/promise');

// Configuraci√≥n de conexi√≥n a la base de datos Aiven
const dbConfig = {
  host: 'mysql-aiven-arenazl.e.aivencloud.com',
  port: 23108,
  user: 'avnadmin',
  password: 'AVNS_Fqe0qsChCHnqSnVsvoi',
  database: 'gastro'
};

async function fixIconColumns() {
  let connection;
  
  try {
    console.log('Conectando a la base de datos...');
    connection = await mysql.createConnection(dbConfig);
    
    // 1. Expandir columna icon en categor√≠as
    console.log('Expandiendo columna icon en categories...');
    try {
      await connection.execute(`
        ALTER TABLE categories 
        MODIFY COLUMN icon VARCHAR(50) DEFAULT NULL
      `);
      console.log('‚úÖ Columna icon expandida en categories');
    } catch (error) {
      console.log(`‚ö†Ô∏è Error expandiendo columna: ${error.message}`);
    }

    // 2. Expandir columna icon en subcategor√≠as
    console.log('Expandiendo columna icon en subcategories...');
    try {
      await connection.execute(`
        ALTER TABLE subcategories 
        MODIFY COLUMN icon VARCHAR(50) DEFAULT NULL
      `);
      console.log('‚úÖ Columna icon expandida en subcategories');
    } catch (error) {
      console.log(`‚ö†Ô∏è Error expandiendo columna: ${error.message}`);
    }

    // 3. Actualizar los √≠conos que fallaron con nombres m√°s cortos
    console.log('Actualizando √≠conos con nombres m√°s cortos...');
    const fixUpdates = [
      // Subcategor√≠as que fallaron
      [8, 'chicken'], // Aves (m√°s corto que drumstick-bite)
      [15, 'cookie'], // Postres cl√°sicos (m√°s corto que cake-candles)
      [19, 'glass'] // Bebidas fr√≠as (m√°s corto que glass-water)
    ];

    for (const [id, icon] of fixUpdates) {
      try {
        await connection.execute(
          'UPDATE subcategories SET icon = ? WHERE id = ?',
          [icon, id]
        );
        console.log(`‚úÖ Subcategor√≠a ${id} actualizada con √≠cono ${icon}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Error actualizando subcategor√≠a ${id}: ${error.message}`);
      }
    }

    console.log('‚úÖ Columnas de √≠conos corregidas exitosamente!');

    // Verificar que todos tengan √≠conos
    const [results] = await connection.execute(`
      SELECT 
        'categories' as table_name,
        COUNT(*) as total,
        COUNT(CASE WHEN icon IS NOT NULL AND icon != '' THEN 1 END) as with_icons
      FROM categories
      UNION ALL
      SELECT 
        'subcategories' as table_name,
        COUNT(*) as total,
        COUNT(CASE WHEN icon IS NOT NULL AND icon != '' THEN 1 END) as with_icons
      FROM subcategories
    `);

    console.log('\nüìä Verificaci√≥n final:');
    results.forEach(result => {
      console.log(`   - ${result.table_name}: ${result.with_icons}/${result.total} con √≠conos`);
    });

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

fixIconColumns();